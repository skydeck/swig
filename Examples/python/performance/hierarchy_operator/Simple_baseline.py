# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Simple_baseline', [dirname(__file__)])
        except ImportError:
            import _Simple_baseline
            return _Simple_baseline
        if fp is not None:
            try:
                _mod = imp.load_module('_Simple_baseline', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Simple_baseline = swig_import_helper()
    del swig_import_helper
else:
    import _Simple_baseline
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class A(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, A, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, A, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Simple_baseline.new_A()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Simple_baseline.delete_A
    __del__ = lambda self : None;
    def func(self): return _Simple_baseline.A_func(self)
    def __iadd__(self, *args): return _Simple_baseline.A___iadd__(self, *args)
A_swigregister = _Simple_baseline.A_swigregister
A_swigregister(A)

class B(A):
    __swig_setmethods__ = {}
    for _s in [A]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, B, name, value)
    __swig_getmethods__ = {}
    for _s in [A]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, B, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Simple_baseline.new_B()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Simple_baseline.delete_B
    __del__ = lambda self : None;
B_swigregister = _Simple_baseline.B_swigregister
B_swigregister(B)

class C(B):
    __swig_setmethods__ = {}
    for _s in [B]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, C, name, value)
    __swig_getmethods__ = {}
    for _s in [B]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, C, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Simple_baseline.new_C()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Simple_baseline.delete_C
    __del__ = lambda self : None;
C_swigregister = _Simple_baseline.C_swigregister
C_swigregister(C)

class D(C):
    __swig_setmethods__ = {}
    for _s in [C]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, D, name, value)
    __swig_getmethods__ = {}
    for _s in [C]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, D, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Simple_baseline.new_D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Simple_baseline.delete_D
    __del__ = lambda self : None;
D_swigregister = _Simple_baseline.D_swigregister
D_swigregister(D)

class E(D):
    __swig_setmethods__ = {}
    for _s in [D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, E, name, value)
    __swig_getmethods__ = {}
    for _s in [D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, E, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Simple_baseline.new_E()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Simple_baseline.delete_E
    __del__ = lambda self : None;
E_swigregister = _Simple_baseline.E_swigregister
E_swigregister(E)

class F(E):
    __swig_setmethods__ = {}
    for _s in [E]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, F, name, value)
    __swig_getmethods__ = {}
    for _s in [E]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, F, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Simple_baseline.new_F()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Simple_baseline.delete_F
    __del__ = lambda self : None;
F_swigregister = _Simple_baseline.F_swigregister
F_swigregister(F)

class G(F):
    __swig_setmethods__ = {}
    for _s in [F]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, G, name, value)
    __swig_getmethods__ = {}
    for _s in [F]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, G, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Simple_baseline.new_G()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Simple_baseline.delete_G
    __del__ = lambda self : None;
G_swigregister = _Simple_baseline.G_swigregister
G_swigregister(G)

class H(G):
    __swig_setmethods__ = {}
    for _s in [G]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, H, name, value)
    __swig_getmethods__ = {}
    for _s in [G]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, H, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Simple_baseline.new_H()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Simple_baseline.delete_H
    __del__ = lambda self : None;
H_swigregister = _Simple_baseline.H_swigregister
H_swigregister(H)



